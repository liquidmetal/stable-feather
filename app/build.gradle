apply plugin: 'com.android.application'

task buildNative(type:Exec, description:'Compile JNI source via NDK') {
    def ndkDir = project.plugins.findPlugin("com.android.application").getNdkFolder()
    commandLine "$ndkDir/ndk-build",
            '-C', file("src/main/jni").absolutePath,
            '-j', Runtime.runtime.availableProcessors(),
            'all',
            'NDK_DEBUG=1'
}

task ndkLibsToJar(type: Zip, dependsOn: 'buildNative', description: 'Create a JAR of the native libs') {
    destinationDir new File(buildDir, 'libs')
    baseName 'ndk-libs'
    extension 'jar'
    from(new File(buildDir, 'libs')) { include '**/*.so' }
    into 'lib/'
}

task cleanNative(type: Exec, description: 'Clean JNI object files') {
    def ndkDir = project.plugins.findPlugin("com.android.application").getNdkFolder()
    commandLine "$ndkDir/ndk-build",
            "-C", file("src/main/jni").absolutePath,
            "clean"
}

clean.dependsOn "cleanNative"
tasks.withType(JavaCompile) {
    compileTask -> dependsOn ndkLibsToJar
}


android {
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    defaultConfig {
        applicationId "com.utkarshsinha.stablefeather"
        minSdkVersion 18
        targetSdkVersion 20
        versionCode 1
        versionName "1.0"

        ndk {
            moduleName "stable_feather"
        }
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'src/main/libs'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:20.+'
    compile project(':libraries:opencv')
    compile fileTree(dir: new File(buildDir, 'libs'), include: '*.jar')
}
